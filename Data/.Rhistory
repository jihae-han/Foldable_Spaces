df <- data.frame(expand.grid(dimnames(temp)),array(temp))
df <- na.omit(df)
df$p <- df$array.temp.
df$group1 <- df$Var1
df$group2 <- df$Var2
df$stars <- stars.pval(df$p)
df$y.position <- c(ma + 1 * step, ma + 3*step,ma + 5*step,ma + 2*step,ma + 4*step,ma + 1*step)
g <- g  + stat_pvalue_manual(df, label = 'stars', hide.ns=TRUE)
}
g
}
#Load data and fix user input errors
raw = read.csv("results_survey.csv")
offset = 69-33
raw[c(1)] <- seq(1,nrow(raw))
raw[1,33] <- "AO04"
#Organise spatial metrics
COGspatial = data.frame(ID=NA, Condition=NA, RoomSize=NA, Walked=NA)
COGspatial <- COGspatial[FALSE,]
spatial1 <- raw[c(1,33:35)]
spatial2 <- raw[c(1,33:35+offset)]
spatial3 <- raw[c(1,33:35+offset*2)]
spatial4 <- raw[c(1,33:35+offset*3)]
names(spatial1) <- names(COGspatial)
names(spatial2) <- names(COGspatial)
names(spatial3) <- names(COGspatial)
names(spatial4) <- names(COGspatial)
COGspatial <- rbind(COGspatial, spatial1)
COGspatial <- rbind(COGspatial, spatial2)
COGspatial <- rbind(COGspatial, spatial3)
COGspatial <- rbind(COGspatial, spatial4)
COGspatial[2] <- sapply(COGspatial$Condition, code2trial)
#COG1: "how many times larger than the physical environment is the virtual environment?
gtcog1 = 96/16
COGspatial$AccuracyRoom <- abs(COGspatial$RoomSize-gtcog1)/gtcog1*100
#stats
friedman.test(AccuracyRoom ~ Condition | ID, data = COGspatial)
res.aov <- aov(AccuracyRoom ~ Condition, data = COGspatial)
summary(res.aov)
pw_accuracyroom <- pairwise.wilcox.test(COGspatial$AccuracyRoom, COGspatial$Condition, p.adjust.method = "bonferroni", paired = TRUE)
pw_accuracyroom
createBoxplot5(COGspatial,'AccuracyRoom',"Room Accuracy",pw_accuracyroom)
#Load data and fix user input errors
raw = read.csv("results_survey.csv")
offset = 69-33
raw[c(1)] <- seq(1,nrow(raw))
raw[1,33] <- "AO04"
#Organise spatial metrics
COGspatial = data.frame(ID=NA, Condition=NA, RoomSize=NA, Walked=NA)
COGspatial <- COGspatial[FALSE,]
spatial1 <- raw[c(1,33:35)]
spatial2 <- raw[c(1,33:35+offset)]
spatial3 <- raw[c(1,33:35+offset*2)]
spatial4 <- raw[c(1,33:35+offset*3)]
names(spatial1) <- names(COGspatial)
names(spatial2) <- names(COGspatial)
names(spatial3) <- names(COGspatial)
names(spatial4) <- names(COGspatial)
COGspatial <- rbind(COGspatial, spatial1)
COGspatial <- rbind(COGspatial, spatial2)
COGspatial <- rbind(COGspatial, spatial3)
COGspatial <- rbind(COGspatial, spatial4)
COGspatial[2] <- sapply(COGspatial$Condition, code2trial)
#COG1: "how many times larger than the physical environment is the virtual environment?
gtcog1 = 96/16
COGspatial$AccuracyRoom <- abs(COGspatial$RoomSize-gtcog1)/gtcog1*100
#stats
friedman.test(AccuracyRoom ~ Condition | ID, data = COGspatial)
res.aov <- aov(AccuracyRoom ~ Condition, data = COGspatial)
summary(res.aov)
pw_accuracyroom <- pairwise.wilcox.test(COGspatial$AccuracyRoom, COGspatial$Condition, p.adjust.method = "bonferroni", paired = TRUE)
pw_accuracyroom
createBoxplot5(COGspatial,'AccuracyRoom',"Room Accuracy",pw_accuracyroom)
#Load data and fix user input errors
raw = read.csv("results_survey.csv")
offset = 69-33
raw[c(1)] <- seq(1,nrow(raw))
raw[1,33] <- "AO04"
#Organise spatial metrics
COGspatial = data.frame(ID=NA, Condition=NA, RoomSize=NA, Walked=NA)
COGspatial <- COGspatial[FALSE,]
spatial1 <- raw[c(1,33:35)]
spatial2 <- raw[c(1,33:35+offset)]
spatial3 <- raw[c(1,33:35+offset*2)]
spatial4 <- raw[c(1,33:35+offset*3)]
names(spatial1) <- names(COGspatial)
names(spatial2) <- names(COGspatial)
names(spatial3) <- names(COGspatial)
names(spatial4) <- names(COGspatial)
COGspatial <- rbind(COGspatial, spatial1)
COGspatial <- rbind(COGspatial, spatial2)
COGspatial <- rbind(COGspatial, spatial3)
COGspatial <- rbind(COGspatial, spatial4)
COGspatial[2] <- sapply(COGspatial$Condition, code2trial)
#COG1: "how many times larger than the physical environment is the virtual environment?
gtcog1 = 96/16
COGspatial$AccuracyRoom <- abs(COGspatial$RoomSize-gtcog1)/gtcog1*100
#stats
friedman.test(AccuracyRoom ~ Condition | ID, data = COGspatial)
res.aov <- aov(AccuracyRoom ~ Condition, data = COGspatial)
summary(res.aov)
pw_accuracyroom <- pairwise.wilcox.test(COGspatial$AccuracyRoom, COGspatial$Condition, p.adjust.method = "bonferroni", paired = TRUE)
pw_accuracyroom
createBoxplot(COGspatial,'AccuracyRoom',"Room Accuracy",pw_accuracyroom)
#Load data and fix user input errors
raw = read.csv("results_survey.csv")
offset = 69-33
raw[c(1)] <- seq(1,nrow(raw))
raw[1,33] <- "AO04"
#Organise spatial metrics
COGspatial = data.frame(ID=NA, Condition=NA, RoomSize=NA, Walked=NA)
COGspatial <- COGspatial[FALSE,]
spatial1 <- raw[c(1,33:35)]
spatial2 <- raw[c(1,33:35+offset)]
spatial3 <- raw[c(1,33:35+offset*2)]
spatial4 <- raw[c(1,33:35+offset*3)]
names(spatial1) <- names(COGspatial)
names(spatial2) <- names(COGspatial)
names(spatial3) <- names(COGspatial)
names(spatial4) <- names(COGspatial)
COGspatial <- rbind(COGspatial, spatial1)
COGspatial <- rbind(COGspatial, spatial2)
COGspatial <- rbind(COGspatial, spatial3)
COGspatial <- rbind(COGspatial, spatial4)
COGspatial[2] <- sapply(COGspatial$Condition, code2trial)
#COG1: "how many times larger than the physical environment is the virtual environment?
gtcog1 = 96/16
COGspatial$AccuracyRoom <- abs(COGspatial$RoomSize)/gtcog1*100
#stats
friedman.test(AccuracyRoom ~ Condition | ID, data = COGspatial)
res.aov <- aov(AccuracyRoom ~ Condition, data = COGspatial)
summary(res.aov)
pw_accuracyroom <- pairwise.wilcox.test(COGspatial$AccuracyRoom, COGspatial$Condition, p.adjust.method = "bonferroni", paired = TRUE)
pw_accuracyroom
createBoxplot(COGspatial,'AccuracyRoom',"Room Accuracy",pw_accuracyroom)
#Load data and fix user input errors
raw = read.csv("results_survey.csv")
offset = 69-33
raw[c(1)] <- seq(1,nrow(raw))
raw[1,33] <- "AO04"
#Organise spatial metrics
COGspatial = data.frame(ID=NA, Condition=NA, RoomSize=NA, Walked=NA)
COGspatial <- COGspatial[FALSE,]
spatial1 <- raw[c(1,33:35)]
spatial2 <- raw[c(1,33:35+offset)]
spatial3 <- raw[c(1,33:35+offset*2)]
spatial4 <- raw[c(1,33:35+offset*3)]
names(spatial1) <- names(COGspatial)
names(spatial2) <- names(COGspatial)
names(spatial3) <- names(COGspatial)
names(spatial4) <- names(COGspatial)
COGspatial <- rbind(COGspatial, spatial1)
COGspatial <- rbind(COGspatial, spatial2)
COGspatial <- rbind(COGspatial, spatial3)
COGspatial <- rbind(COGspatial, spatial4)
COGspatial[2] <- sapply(COGspatial$Condition, code2trial)
#COG1: "how many times larger than the physical environment is the virtual environment?
gtcog1 = 96/16
COGspatial$AccuracyRoom <- abs(COGspatial$RoomSize-gtcog1)/gtcog1*100
#stats
friedman.test(AccuracyRoom ~ Condition | ID, data = COGspatial)
res.aov <- aov(AccuracyRoom ~ Condition, data = COGspatial)
summary(res.aov)
pw_accuracyroom <- pairwise.wilcox.test(COGspatial$AccuracyRoom, COGspatial$Condition, p.adjust.method = "bonferroni", paired = TRUE)
pw_accuracyroom
createBoxplot(COGspatial,'AccuracyRoom',"Room Accuracy",pw_accuracyroom)
COGspatial
#COGq2, distance accuracy
COGspatial$AccuracyWalked <- 0
COGspatial
?&
#COGq2, distance accuracy
COGspatial$AccuracyWalked <- 0
COGspatial[which(COGspatial$ID==20 && COGspatial$Condition=="Acc")]
#COGq2, distance accuracy
COGspatial$AccuracyWalked <- 0
COGspatial[which(COGspatial$ID==20)]
#COGq2, distance accuracy
COGspatial$AccuracyWalked <- 0
COGspatial[which(COGspatial$ID==20),]
#COGq2, distance accuracy
COGspatial$AccuracyWalked <- 0
COGspatial[which(COGspatial$ID==20),][1,]
#COGq2, distance accuracy
COGspatial$AccuracyWalked <- 0
COGspatial[which(COGspatial$ID==20),][which(COGspatial$Condition=="Acc"),]
#COGq2, distance accuracy
COGspatial$AccuracyWalked <- 0
COGspatial[which(COGspatial$ID==20),]
#COGq2, distance accuracy
COGspatial$AccuracyWalked <- 0
COGspatial[which(COGspatial$ID==20) && which(COGspatial$Condition=="Acc"),]
#COGq2, distance accuracy
COGspatial$AccuracyWalked <- 0
COGspatial[which(COGspatial$ID==20),]
#COGq2, distance accuracy
COGspatial$AccuracyWalked <- 0
COGspatial[which(COGspatial$ID==20),][1]
#COGq2, distance accuracy
COGspatial$AccuracyWalked <- 0
COGspatial[which(COGspatial$ID==20),][COGspatial$Condition=="Acc"]
#COGq2, distance accuracy
COGspatial$AccuracyWalked <- 0
COGspatial[which(COGspatial$ID==20),][COGspatial$Condition=="Acc",]
#COGq2, distance accuracy
COGspatial$AccuracyWalked <- 0
cogspatial <- COGspatial[which(COGspatial$ID==20),]
cogspatial <- cogspatial[which(COGspatial$Condition=="Acc")]
#COGq2, distance accuracy
COGspatial$AccuracyWalked <- 0
cogspatial <- COGspatial[which(COGspatial$ID==20),]
cogspatial <- cogspatial[which(COGspatial$Condition=="Acc"),]
cogspatial
#COGq2, distance accuracy
COGspatial$AccuracyWalked <- 0
cogspatial <- COGspatial[which(COGspatial$ID==20),]
cogspatial
#COGq2, distance accuracy
COGspatial$AccuracyWalked <- 0
cogspatial <- COGspatial[which(COGspatial$ID==20),]
cogspatial <- cogspatial[which(COGspatial$Condition=='Acc')]
#COGq2, distance accuracy
COGspatial$AccuracyWalked <- 0
cogspatial <- COGspatial[which(COGspatial$ID==20),]
cogspatial <- cogspatial[which(COGspatial$Condition=='Acc'),]
cogspatial
#COGq2, distance accuracy
COGspatial$AccuracyWalked <- 0
cogspatial <- COGspatial[which(COGspatial$Condition=="Acc"),]
cogspatial
#COGq2, distance accuracy
COGspatial$AccuracyWalked <- 0
cogspatial <- COGspatial[which(COGspatial$Condition=="Acc" && COGspatial$ID==20),]
cogspatial
cogspatial
#COGq2, distance accuracy
COGspatial$AccuracyWalked <- 0
cogspatial <- COGspatial[which(COGspatial$Condition=="Acc"),]
cogspatial
#COGq2, distance accuracy
COGspatial$AccuracyWalked <- 0
cogspatial <- COGspatial[which(COGspatial$Condition=="Acc"),]
cogspatial <- cogspatial[which(COGspatial$ID==20),]
#COGq2, distance accuracy
COGspatial$AccuracyWalked <- 0
cogspatial <- COGspatial[which(COGspatial$Condition=="Acc"),]
cogspatial <- cogspatial[which(COGspatial$ID==20),]
cogspatial
#COGq2, distance accuracy
COGspatial$AccuracyWalked <- 0
cogspatial <- COGspatial[which(COGspatial$Condition=="Acc"),]
tempcog <- cogspatial[which(COGspatial$ID==20),]
tempcog
#COGq2, distance accuracy
COGspatial$AccuracyWalked <- 0
cogspatial <- COGspatial[which(COGspatial$Condition=="Acc"),]
tempcog <- cogspatial[which(COGspatial$ID==20),]
tempcog
cogspatial
#COGq2, distance accuracy
COGspatial$AccuracyWalked <- 0
cogspatial <- COGspatial[which(COGspatial$Condition=="Acc"),]
cogspatial[cogspatial$ID==20,]
#COGq2, distance accuracy
COGspatial$AccuracyWalked <- 0
cogspatial <- COGspatial[COGspatial$Condition=="Acc" && COGspatial$ID==20,]
cogspatial
#COGq2, distance accuracy
COGspatial$AccuracyWalked <- 0
cogspatial <- COGspatial[COGspatial$Condition=="Acc"),]
#COGq2, distance accuracy
COGspatial$AccuracyWalked <- 0
cogspatial <- COGspatial[which(COGspatial$Condition=="Acc"),]
cogspatial[cogspatial$ID==20,]
#COGq2, distance accuracy
COGspatial$AccuracyWalked <- 0
cogspatial <- COGspatial[which(COGspatial$Condition=="Acc"),]
cogspatial <- cogspatial[cogspatial$ID==20,]
#COGq2, distance accuracy
COGspatial$AccuracyWalked <- 0
cogspatial <- COGspatial[which(COGspatial$Condition=="Acc"),]
cogspatial <- cogspatial[cogspatial$ID==20,]
cogspatial
cogspatial
#COGq2, distance accuracy
COGspatial$AccuracyWalked <- 0
cogspatial <- COGspatial[which(COGspatial$Condition=="Acc"),]
cogspatial <- cogspatial[cogspatial$ID==20,]
cogspatial$AccuracyWalked <- 4
COGspatial
cogspatial
rownames(cogspatial)
#COGq2, distance accuracy
COGspatial$AccuracyWalked <- 0
cogspatial <- COGspatial[which(COGspatial$Condition=="Acc"),]
cogspatial <- cogspatial[cogspatial$ID==20,]
rownames(cogspatial)
#COGq2, distance accuracy
COGspatial$AccuracyWalked <- 0
cogspatial <- COGspatial[which(COGspatial$Condition=="Acc"),]
cogspatial <- cogspatial[cogspatial$ID==20,]
as.integer(rownames(cogspatial))
COGspatial[[Condition]]
COGspatial[[Condition],]
COGspatial[Condition,]
#COGq2, distance accuracy
COGspatial$AccuracyWalked <- 0
getrowindex <- function(container, id, condition){
tempcontainer <- container[which(container$Condition==condition),]
tempcontainer <- tempcontainer[tempcontainer$ID=id,]
#COGq2, distance accuracy
COGspatial$AccuracyWalked <- 0
getrowindex <- function(container, id, condition){
tempcontainer <- container[which(container$Condition==condition),]
tempcontainer <- tempcontainer[tempcontainer$ID==id,]
as.integer(rownames(tempcontainer))
}
cogspatial <- COGspatial[which(COGspatial$Condition=="Acc"),]
cogspatial <- cogspatial[cogspatial$ID==20,]
as.integer(rownames(cogspatial))
getrowindex(COGspatial, 20, "Ver")
COGspatial[60,]
#COGq2, distance accuracy
COGspatial$AccuracyWalked <- 0
getrowindex <- function(container, id, condition){
tempcontainer <- container[which(container$Condition==condition),]
tempcontainer <- tempcontainer[tempcontainer$ID==id,]
as.integer(rownames(tempcontainer))
}
#COGq2, distance accuracy
COGspatial$AccuracyWalked <- 0
COGspatial[getrowindex(COGspatial,20,"Acc"),4]
COGspatial[getrowindex(COGspatial,20,"Acc"),5]
COGspatial
COGspatial[getrowindex(COGspatial,20,"Acc"),6]
#COGq2, distance accuracy
COGspatial$TotalWalked <- 0
#COGq2, distance accuracy
COGspatial$TotalWalked <- 0
COGspatial$AccuracyWalked <- 0
COGspatial
rm(COGspatial)
#Load data and fix user input errors
raw = read.csv("results_survey.csv")
offset = 69-33
raw[c(1)] <- seq(1,nrow(raw))
raw[1,33] <- "AO04"
#Organise spatial metrics
COGspatial = data.frame(ID=NA, Condition=NA, RoomSize=NA, Walked=NA)
COGspatial <- COGspatial[FALSE,]
spatial1 <- raw[c(1,33:35)]
spatial2 <- raw[c(1,33:35+offset)]
spatial3 <- raw[c(1,33:35+offset*2)]
spatial4 <- raw[c(1,33:35+offset*3)]
names(spatial1) <- names(COGspatial)
names(spatial2) <- names(COGspatial)
names(spatial3) <- names(COGspatial)
names(spatial4) <- names(COGspatial)
COGspatial <- rbind(COGspatial, spatial1)
COGspatial <- rbind(COGspatial, spatial2)
COGspatial <- rbind(COGspatial, spatial3)
COGspatial <- rbind(COGspatial, spatial4)
COGspatial[2] <- sapply(COGspatial$Condition, code2trial)
#COG1: "how many times larger than the physical environment is the virtual environment?
gtcog1 = 96/16
COGspatial$AccuracyRoom <- abs(COGspatial$RoomSize-gtcog1)/gtcog1*100
#stats
friedman.test(AccuracyRoom ~ Condition | ID, data = COGspatial)
res.aov <- aov(AccuracyRoom ~ Condition, data = COGspatial)
summary(res.aov)
pw_accuracyroom <- pairwise.wilcox.test(COGspatial$AccuracyRoom, COGspatial$Condition, p.adjust.method = "bonferroni", paired = TRUE)
pw_accuracyroom
createBoxplot(COGspatial,'AccuracyRoom',"Room Accuracy",pw_accuracyroom)
#list&organise all files in folder
walking = data.frame(ID=NA, Condition=NA, Path=NA)
walking <- walking[FALSE,]
acc_path <- list.files(path = ".", pattern = "1AccordionTest")
ver_path <- list.files(path = ".", pattern = "2VertTest")
hor_path <- list.files(path = ".", pattern = "3HoriTest")
snr_path <- list.files(path = ".", pattern = "4StopFadeReset")
acc_raw <- file2walking(acc_path, "Acc", walking)
ver_raw <- file2walking(ver_path, "Ver", walking)
hor_raw <- file2walking(hor_path, "Hor", walking)
snr_raw <- file2walking(snr_path, "S&R", walking)
walking <- rbind(walking, acc_raw)
walking <- rbind(walking, ver_raw)
walking <- rbind(walking, hor_raw)
walking <- rbind(walking, snr_raw)
#COGq2, distance accuracy
COGspatial$TotalWalked <- 0
COGspatial$AccuracyWalked <- 0
COGspatial
COGspatial[getrowindex(COGspatial,20,"Acc"),]$TotalWalked
#walking example, Accordion 20
walk = data.frame(Time=NA, X=NA, Y=NA)
walk <- walk[FALSE,]
acc20 <- read.csv(toString(walking[27,3]), header = FALSE, sep = ",")
acc20 <- acc20[c(2:4)]
names(acc20) <- names(walk)
#standard values
print(paste("Total Time: ", (max(acc20[1])-min(acc20[1]))/60)) #time
#Distance
acc20$Dist <- 0
for (x in 2:nrow(acc20)){
acc20$Dist[x] <- distxy(acc20$X[x],acc20$Y[x],acc20$X[x-1],acc20$Y[x-1])
}
print(paste("Total Distance: ", sum(acc20$Dist)/100, " meters"))
COGspatial[getrowindex(COGspatial,20,"Acc"),]$TotalWalked <- sum(acc20$Dist)/100
#make scatterplot
#plot(acc20$X,acc20$Y, main = paste("Accordion"), xlab = "X", ylab = "y")
COGspatial[getrowindex(COGspatial,20,"Acc"),]
#walking example, Accordion 20
walk = data.frame(Time=NA, X=NA, Y=NA)
walk <- walk[FALSE,]
acc20 <- read.csv(toString(walking[27,3]), header = FALSE, sep = ",")
acc20 <- acc20[c(2:4)]
names(acc20) <- names(walk)
#standard values
print(paste("Total Time: ", (max(acc20[1])-min(acc20[1]))/60)) #time
#Distance
acc20$Dist <- 0
for (x in 2:nrow(acc20)){
acc20$Dist[x] <- distxy(acc20$X[x],acc20$Y[x],acc20$X[x-1],acc20$Y[x-1])
}
print(paste("Total Distance: ", sum(acc20$Dist)/100, " meters"))
#set walk accuracy
walkaccuracy <- function(walk,id,condition) {
index <- getrowindex(COGspatial,id,condition)
COGspatial[index,]$TotalWalked <- sum(walk$Dist)/100
COGspatial[index,]$AccuracyWalked <- COGspatial[index,]$Walked/COGspatial[index,]$TotalWalked
COGspatial[index,]
}
#make scatterplot
#plot(acc20$X,acc20$Y, main = paste("Accordion"), xlab = "X", ylab = "y")
#walking example, Accordion 20
walk = data.frame(Time=NA, X=NA, Y=NA)
walk <- walk[FALSE,]
acc20 <- read.csv(toString(walking[27,3]), header = FALSE, sep = ",")
acc20 <- acc20[c(2:4)]
names(acc20) <- names(walk)
#standard values
print(paste("Total Time: ", (max(acc20[1])-min(acc20[1]))/60)) #time
#Distance
acc20$Dist <- 0
for (x in 2:nrow(acc20)){
acc20$Dist[x] <- distxy(acc20$X[x],acc20$Y[x],acc20$X[x-1],acc20$Y[x-1])
}
print(paste("Total Distance: ", sum(acc20$Dist)/100, " meters"))
#set walk accuracy
walkaccuracy <- function(walk,id,condition) {
index <- getrowindex(COGspatial,id,condition)
COGspatial[index,]$TotalWalked <- sum(walk$Dist)/100
COGspatial[index,]$AccuracyWalked <- COGspatial[index,]$Walked/COGspatial[index,]$TotalWalked
COGspatial[index,]
}
walkaccuracy(acc20,20,"Acc")
#make scatterplot
#plot(acc20$X,acc20$Y, main = paste("Accordion"), xlab = "X", ylab = "y")
walking
#list&organise all files in folder
walking = data.frame(ID=NA, Condition=NA, Path=NA)
walking <- walking[FALSE,]
acc_path <- list.files(path = ".", pattern = "1AccordionTest")
ver_path <- list.files(path = ".", pattern = "2VertTest")
hor_path <- list.files(path = ".", pattern = "3HoriTest")
snr_path <- list.files(path = ".", pattern = "4StopFadeReset")
acc_raw <- file2walking(acc_path, "Acc", walking)
ver_raw <- file2walking(ver_path, "Ver", walking)
hor_raw <- file2walking(hor_path, "Hor", walking)
snr_raw <- file2walking(snr_path, "S&R", walking)
walking <- rbind(walking, acc_raw)
walking <- rbind(walking, ver_raw)
walking <- rbind(walking, hor_raw)
walking <- rbind(walking, snr_raw)
print(getrowindex(walking,20,"Acc"))
getrowindex(walking,20,"Acc")
nrow(walking)
#list&organise all files in folder
walking = data.frame(ID=NA, Condition=NA, Path=NA)
walking <- walking[FALSE,]
acc_path <- list.files(path = ".", pattern = "1AccordionTest")
ver_path <- list.files(path = ".", pattern = "2VertTest")
hor_path <- list.files(path = ".", pattern = "3HoriTest")
snr_path <- list.files(path = ".", pattern = "4StopFadeReset")
acc_raw <- file2walking(acc_path, "Acc", walking)
ver_raw <- file2walking(ver_path, "Ver", walking)
hor_raw <- file2walking(hor_path, "Hor", walking)
snr_raw <- file2walking(snr_path, "S&R", walking)
walking <- rbind(walking, acc_raw)
walking <- rbind(walking, ver_raw)
walking <- rbind(walking, hor_raw)
walking <- rbind(walking, snr_raw)
colnames(walking) <- c("ID", "Condition", "Path")
walking
#list&organise all files in folder
walking = data.frame(ID=NA, Condition=NA, Path=NA)
walking <- walking[FALSE,]
acc_path <- list.files(path = ".", pattern = "1AccordionTest")
ver_path <- list.files(path = ".", pattern = "2VertTest")
hor_path <- list.files(path = ".", pattern = "3HoriTest")
snr_path <- list.files(path = ".", pattern = "4StopFadeReset")
acc_raw <- file2walking(acc_path, "Acc", walking)
ver_raw <- file2walking(ver_path, "Ver", walking)
hor_raw <- file2walking(hor_path, "Hor", walking)
snr_raw <- file2walking(snr_path, "S&R", walking)
walking <- rbind(walking, acc_raw)
walking <- rbind(walking, ver_raw)
walking <- rbind(walking, hor_raw)
walking <- rbind(walking, snr_raw)
colnames(walking) <- c("ID", "Condition", "Path")
print(getrowindex(walking,20,"Acc"))
walking[27,]
